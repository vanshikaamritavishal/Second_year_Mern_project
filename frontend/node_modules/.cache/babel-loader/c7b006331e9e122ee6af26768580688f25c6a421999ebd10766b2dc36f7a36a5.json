{"ast":null,"code":"// import React, { useState, useEffect, useRef } from \"react\";\n// import { db } from \"../firebase\";\n// import {\n//   collection,\n//   query,\n//   where,\n//   getDocs,\n//   updateDoc,\n//   doc,\n//   orderBy,\n//   addDoc,\n//   onSnapshot,\n//   serverTimestamp,\n// } from \"firebase/firestore\";\n\n// export default function Messages() {\n//   const user = JSON.parse(localStorage.getItem(\"user\"));\n//   const [allUsers, setAllUsers] = useState([]);\n//   const [requests, setRequests] = useState([]);\n//   const [acceptedUsers, setAcceptedUsers] = useState([]);\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState(\"\");\n//   const [unreadCounts, setUnreadCounts] = useState({});\n//   const messagesEndRef = useRef(null);\n\n//   // Fetch all users\n//   useEffect(() => {\n//     const fetchUsers = async () => {\n//       const snapshot = await getDocs(collection(db, \"users\"));\n//       const users = snapshot.docs.map((doc) => doc.data());\n//       setAllUsers(users);\n//     };\n//     fetchUsers();\n//   }, []);\n\n//   // Fetch incoming requests\n//   useEffect(() => {\n//     if (!allUsers.length) return;\n//     const q = query(collection(db, \"requests\"), where(\"toId\", \"==\", user.googleId));\n//     const unsubscribe = onSnapshot(q, (snapshot) => {\n//       const reqs = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n//       setRequests(reqs.filter((r) => r.status === \"pending\"));\n//     });\n//     return () => unsubscribe();\n//   }, [allUsers]);\n\n//   // Fetch accepted users\n//   useEffect(() => {\n//     if (!allUsers.length) return;\n//     const q = query(collection(db, \"requests\"), where(\"status\", \"==\", \"accepted\"));\n//     const unsubscribe = onSnapshot(q, (snapshot) => {\n//       let accepted = snapshot.docs\n//         .map((doc) => doc.data())\n//         .filter((r) => r.fromId === user.googleId || r.toId === user.googleId)\n//         .map((r) => {\n//           const otherId = r.fromId === user.googleId ? r.toId : r.fromId;\n//           const otherUser = allUsers.find((u) => u.googleId === otherId);\n//           return otherUser ? { id: otherId, name: otherUser.name } : null;\n//         })\n//         .filter(Boolean);\n\n//       const unique = Array.from(new Map(accepted.map((u) => [u.id, u])).values());\n//       setAcceptedUsers(unique);\n//     });\n//     return () => unsubscribe();\n//   }, [allUsers]);\n\n//   // Fetch messages\n//   useEffect(() => {\n//     if (!selectedUser || !allUsers.length) return;\n//     const chatId = [user.googleId, selectedUser.id].sort().join(\"_\");\n//     const q = query(\n//       collection(db, \"messages\"),\n//       where(\"chatId\", \"==\", chatId),\n//       orderBy(\"timestamp\", \"asc\")\n//     );\n//     const unsubscribe = onSnapshot(q, (snapshot) => {\n//       const msgs = snapshot.docs.map((doc) => doc.data());\n//       setMessages(msgs);\n\n//       // Browser notification for incoming messages\n//       if (msgs.length > 0) {\n//         const lastMessage = msgs[msgs.length - 1];\n//         if (lastMessage.fromId !== user.googleId && Notification.permission === \"granted\") {\n//           new Notification(`New message from ${selectedUser.name}`, {\n//             body: lastMessage.message,\n//           });\n//         }\n//       }\n//     });\n//     return () => unsubscribe();\n//   }, [selectedUser, allUsers]);\n\n//   // Auto scroll to bottom\n//   useEffect(() => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   }, [messages]);\n\n//   // Track unread messages\n//   useEffect(() => {\n//     const q = query(\n//       collection(db, \"messages\"),\n//       where(\"toId\", \"==\", user.googleId),\n//       where(\"read\", \"==\", false)\n//     );\n\n//     const unsubscribe = onSnapshot(q, (snapshot) => {\n//       const counts = {};\n//       snapshot.docs.forEach((docSnap) => {\n//         const msg = docSnap.data();\n//         const otherId = msg.fromId;\n//         counts[otherId] = (counts[otherId] || 0) + 1;\n//       });\n//       setUnreadCounts(counts);\n//     });\n\n//     return () => unsubscribe();\n//   }, []);\n\n//   // Mark messages as read when a chat is opened\n//   useEffect(() => {\n//     if (!selectedUser) return;\n//     const chatId = [user.googleId, selectedUser.id].sort().join(\"_\");\n//     const q = query(\n//       collection(db, \"messages\"),\n//       where(\"chatId\", \"==\", chatId),\n//       where(\"toId\", \"==\", user.googleId),\n//       where(\"read\", \"==\", false)\n//     );\n\n//     const markRead = async () => {\n//       const snapshot = await getDocs(q);\n//       snapshot.docs.forEach(async (docSnap) => {\n//         await updateDoc(doc(db, \"messages\", docSnap.id), { read: true });\n//       });\n//     };\n//     markRead();\n//   }, [selectedUser]);\n\n//   // Request browser notification permission\n//   useEffect(() => {\n//     if (\"Notification\" in window) Notification.requestPermission();\n//   }, []);\n\n//   const acceptRequest = async (req) => {\n//     const requestRef = doc(db, \"requests\", req.id);\n//     await updateDoc(requestRef, { status: \"accepted\" });\n//   };\n\n//   const rejectRequest = async (req) => {\n//     const requestRef = doc(db, \"requests\", req.id);\n//     await updateDoc(requestRef, { status: \"rejected\" });\n//   };\n\n//   const sendMessage = async () => {\n//     if (!newMessage.trim() || !selectedUser) return;\n//     const chatId = [user.googleId, selectedUser.id].sort().join(\"_\");\n//     await addDoc(collection(db, \"messages\"), {\n//       chatId,\n//       fromId: user.googleId,\n//       toId: selectedUser.id,\n//       message: newMessage,\n//       timestamp: serverTimestamp(),\n//       read: false, // âœ… New\n//     });\n//     setNewMessage(\"\");\n//   };\n\n//   // --- UI ---\n//   return (\n//     <div\n//       style={{\n//         display: \"flex\",\n//         height: \"80vh\",\n//         margin: \"20px auto\",\n//         maxWidth: \"900px\",\n//         border: \"1px solid #ddd\",\n//         borderRadius: \"10px\",\n//         overflow: \"hidden\",\n//         boxShadow: \"0 4px 8px rgba(0,0,0,0.1)\",\n//       }}\n//     >\n//       {/* Left Sidebar: Chats + Requests */}\n//       <div\n//         style={{\n//           width: \"30%\",\n//           borderRight: \"1px solid #ddd\",\n//           display: \"flex\",\n//           flexDirection: \"column\",\n//           background: \"#f8f9fa\",\n//         }}\n//       >\n//         <h2 style={{ textAlign: \"center\", padding: \"15px 0\", borderBottom: \"1px solid #ddd\" }}>\n//           Chats\n//         </h2>\n\n//         {/* Incoming Requests */}\n//         <div style={{ padding: \"10px\", borderBottom: \"1px solid #ddd\" }}>\n//           <h4>Requests</h4>\n//           {requests.length === 0 ? (\n//             <p style={{ fontSize: \"14px\", color: \"#777\" }}>No requests</p>\n//           ) : (\n//             requests.map((req) => {\n//               const fromUser = allUsers.find((u) => u.googleId === req.fromId);\n//               return (\n//                 <div\n//                   key={req.id}\n//                   style={{\n//                     background: \"#fff\",\n//                     padding: \"8px\",\n//                     borderRadius: \"8px\",\n//                     marginBottom: \"8px\",\n//                   }}\n//                 >\n//                   <p style={{ margin: \"0 0 5px 0\" }}>From: {fromUser?.name || \"Unknown\"}</p>\n//                   <button\n//                     onClick={() => acceptRequest(req)}\n//                     style={{\n//                       marginRight: \"5px\",\n//                       background: \"#4CAF50\",\n//                       color: \"white\",\n//                       border: \"none\",\n//                       padding: \"5px 10px\",\n//                       borderRadius: \"5px\",\n//                       cursor: \"pointer\",\n//                     }}\n//                   >\n//                     Accept\n//                   </button>\n//                   <button\n//                     onClick={() => rejectRequest(req)}\n//                     style={{\n//                       background: \"#f44336\",\n//                       color: \"white\",\n//                       border: \"none\",\n//                       padding: \"5px 10px\",\n//                       borderRadius: \"5px\",\n//                       cursor: \"pointer\",\n//                     }}\n//                   >\n//                     Reject\n//                   </button>\n//                 </div>\n//               );\n//             })\n//           )}\n//         </div>\n\n//         {/* Accepted Users (Chat List) */}\n//         <div style={{ flex: 1, overflowY: \"auto\" }}>\n//           {acceptedUsers.map((u) => (\n//             <div\n//               key={u.id}\n//               onClick={() => setSelectedUser(u)}\n//               style={{\n//                 padding: \"12px 15px\",\n//                 cursor: \"pointer\",\n//                 background:\n//                   selectedUser?.id === u.id ? \"#d1f0ff\" : \"transparent\",\n//                 borderBottom: \"1px solid #eee\",\n//                 display: \"flex\",\n//                 justifyContent: \"space-between\",\n//                 alignItems: \"center\",\n//                 transition: \"background 0.2s\",\n//               }}\n//               onMouseEnter={(e) => (e.currentTarget.style.background = \"#eef6ff\")}\n//               onMouseLeave={(e) =>\n//                 (e.currentTarget.style.background =\n//                   selectedUser?.id === u.id ? \"#d1f0ff\" : \"transparent\")\n//               }\n//             >\n//               <strong>{u.name}</strong>\n//               {unreadCounts[u.id] > 0 && (\n//                 <span\n//                   style={{\n//                     background: \"red\",\n//                     color: \"white\",\n//                     borderRadius: \"50%\",\n//                     padding: \"2px 7px\",\n//                     fontSize: \"12px\",\n//                   }}\n//                 >\n//                   {unreadCounts[u.id]}\n//                 </span>\n//               )}\n//             </div>\n//           ))}\n//           {acceptedUsers.length === 0 && (\n//             <p style={{ textAlign: \"center\", color: \"#777\", marginTop: \"10px\" }}>No chats yet</p>\n//           )}\n//         </div>\n//       </div>\n\n//       {/* Right Chat Section */}\n//       <div style={{ flex: 1, display: \"flex\", flexDirection: \"column\" }}>\n//         {selectedUser ? (\n//           <>\n//             {/* Header */}\n//             <div\n//               style={{\n//                 padding: \"15px\",\n//                 borderBottom: \"1px solid #ddd\",\n//                 background: \"#f0f0f0\",\n//                 fontWeight: \"bold\",\n//               }}\n//             >\n//               Chat with {selectedUser.name}\n//             </div>\n\n//             {/* Chat messages */}\n//             <div\n//               style={{\n//                 flex: 1,\n//                 overflowY: \"auto\",\n//                 padding: \"15px\",\n//                 background: \"#e5ddd5\",\n//               }}\n//             >\n//               {messages.length === 0 && (\n//                 <p style={{ textAlign: \"center\", color: \"#666\" }}>No messages yet.</p>\n//               )}\n//               {messages.map((msg, idx) => {\n//                 const isSent = msg.fromId === user.googleId;\n//                 return (\n//                   <div\n//                     key={idx}\n//                     style={{\n//                       display: \"flex\",\n//                       justifyContent: isSent ? \"flex-end\" : \"flex-start\",\n//                       marginBottom: \"10px\",\n//                     }}\n//                   >\n//                     <div\n//                       style={{\n//                         maxWidth: \"70%\",\n//                         padding: \"10px 15px\",\n//                         borderRadius: \"15px\",\n//                         background: isSent ? \"#4CAF50\" : \"#fff\",\n//                         color: isSent ? \"#fff\" : \"#000\",\n//                         boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\",\n//                         wordBreak: \"break-word\",\n//                       }}\n//                     >\n//                       {msg.message}\n//                     </div>\n//                   </div>\n//                 );\n//               })}\n//               <div ref={messagesEndRef} />\n//             </div>\n\n//             {/* Input */}\n//             <div\n//               style={{\n//                 display: \"flex\",\n//                 padding: \"10px\",\n//                 borderTop: \"1px solid #ddd\",\n//                 background: \"#fafafa\",\n//               }}\n//             >\n//               <input\n//                 type=\"text\"\n//                 value={newMessage}\n//                 onChange={(e) => setNewMessage(e.target.value)}\n//                 onKeyDown={(e) => e.key === \"Enter\" && sendMessage()} // âœ… Press Enter to send\n//                 placeholder=\"Type a message...\"\n//                 style={{\n//                   flex: 1,\n//                   padding: \"10px\",\n//                   borderRadius: \"20px\",\n//                   border: \"1px solid #ccc\",\n//                   outline: \"none\",\n//                 }}\n//               />\n//               <button\n//                 onClick={sendMessage}\n//                 style={{\n//                   marginLeft: \"10px\",\n//                   padding: \"10px 15px\",\n//                   background: \"#4CAF50\",\n//                   color: \"white\",\n//                   border: \"none\",\n//                   borderRadius: \"20px\",\n//                   cursor: \"pointer\",\n//                 }}\n//               >\n//                 Send\n//               </button>\n//             </div>\n//           </>\n//         ) : (\n//           <div\n//             style={{\n//               flex: 1,\n//               display: \"flex\",\n//               alignItems: \"center\",\n//               justifyContent: \"center\",\n//               color: \"#666\",\n//               fontSize: \"18px\",\n//             }}\n//           >\n//             Select a chat to start messaging\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["D:/SCALER/second_year/Project/skillsync/frontend/src/pages/Messages.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\r\n// import { db } from \"../firebase\";\r\n// import {\r\n//   collection,\r\n//   query,\r\n//   where,\r\n//   getDocs,\r\n//   updateDoc,\r\n//   doc,\r\n//   orderBy,\r\n//   addDoc,\r\n//   onSnapshot,\r\n//   serverTimestamp,\r\n// } from \"firebase/firestore\";\r\n\r\n// export default function Messages() {\r\n//   const user = JSON.parse(localStorage.getItem(\"user\"));\r\n//   const [allUsers, setAllUsers] = useState([]);\r\n//   const [requests, setRequests] = useState([]);\r\n//   const [acceptedUsers, setAcceptedUsers] = useState([]);\r\n//   const [selectedUser, setSelectedUser] = useState(null);\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [newMessage, setNewMessage] = useState(\"\");\r\n//   const [unreadCounts, setUnreadCounts] = useState({});\r\n//   const messagesEndRef = useRef(null);\r\n\r\n//   // Fetch all users\r\n//   useEffect(() => {\r\n//     const fetchUsers = async () => {\r\n//       const snapshot = await getDocs(collection(db, \"users\"));\r\n//       const users = snapshot.docs.map((doc) => doc.data());\r\n//       setAllUsers(users);\r\n//     };\r\n//     fetchUsers();\r\n//   }, []);\r\n\r\n//   // Fetch incoming requests\r\n//   useEffect(() => {\r\n//     if (!allUsers.length) return;\r\n//     const q = query(collection(db, \"requests\"), where(\"toId\", \"==\", user.googleId));\r\n//     const unsubscribe = onSnapshot(q, (snapshot) => {\r\n//       const reqs = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\r\n//       setRequests(reqs.filter((r) => r.status === \"pending\"));\r\n//     });\r\n//     return () => unsubscribe();\r\n//   }, [allUsers]);\r\n\r\n//   // Fetch accepted users\r\n//   useEffect(() => {\r\n//     if (!allUsers.length) return;\r\n//     const q = query(collection(db, \"requests\"), where(\"status\", \"==\", \"accepted\"));\r\n//     const unsubscribe = onSnapshot(q, (snapshot) => {\r\n//       let accepted = snapshot.docs\r\n//         .map((doc) => doc.data())\r\n//         .filter((r) => r.fromId === user.googleId || r.toId === user.googleId)\r\n//         .map((r) => {\r\n//           const otherId = r.fromId === user.googleId ? r.toId : r.fromId;\r\n//           const otherUser = allUsers.find((u) => u.googleId === otherId);\r\n//           return otherUser ? { id: otherId, name: otherUser.name } : null;\r\n//         })\r\n//         .filter(Boolean);\r\n\r\n//       const unique = Array.from(new Map(accepted.map((u) => [u.id, u])).values());\r\n//       setAcceptedUsers(unique);\r\n//     });\r\n//     return () => unsubscribe();\r\n//   }, [allUsers]);\r\n\r\n//   // Fetch messages\r\n//   useEffect(() => {\r\n//     if (!selectedUser || !allUsers.length) return;\r\n//     const chatId = [user.googleId, selectedUser.id].sort().join(\"_\");\r\n//     const q = query(\r\n//       collection(db, \"messages\"),\r\n//       where(\"chatId\", \"==\", chatId),\r\n//       orderBy(\"timestamp\", \"asc\")\r\n//     );\r\n//     const unsubscribe = onSnapshot(q, (snapshot) => {\r\n//       const msgs = snapshot.docs.map((doc) => doc.data());\r\n//       setMessages(msgs);\r\n\r\n//       // Browser notification for incoming messages\r\n//       if (msgs.length > 0) {\r\n//         const lastMessage = msgs[msgs.length - 1];\r\n//         if (lastMessage.fromId !== user.googleId && Notification.permission === \"granted\") {\r\n//           new Notification(`New message from ${selectedUser.name}`, {\r\n//             body: lastMessage.message,\r\n//           });\r\n//         }\r\n//       }\r\n//     });\r\n//     return () => unsubscribe();\r\n//   }, [selectedUser, allUsers]);\r\n\r\n//   // Auto scroll to bottom\r\n//   useEffect(() => {\r\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n//   }, [messages]);\r\n\r\n//   // Track unread messages\r\n//   useEffect(() => {\r\n//     const q = query(\r\n//       collection(db, \"messages\"),\r\n//       where(\"toId\", \"==\", user.googleId),\r\n//       where(\"read\", \"==\", false)\r\n//     );\r\n\r\n//     const unsubscribe = onSnapshot(q, (snapshot) => {\r\n//       const counts = {};\r\n//       snapshot.docs.forEach((docSnap) => {\r\n//         const msg = docSnap.data();\r\n//         const otherId = msg.fromId;\r\n//         counts[otherId] = (counts[otherId] || 0) + 1;\r\n//       });\r\n//       setUnreadCounts(counts);\r\n//     });\r\n\r\n//     return () => unsubscribe();\r\n//   }, []);\r\n\r\n//   // Mark messages as read when a chat is opened\r\n//   useEffect(() => {\r\n//     if (!selectedUser) return;\r\n//     const chatId = [user.googleId, selectedUser.id].sort().join(\"_\");\r\n//     const q = query(\r\n//       collection(db, \"messages\"),\r\n//       where(\"chatId\", \"==\", chatId),\r\n//       where(\"toId\", \"==\", user.googleId),\r\n//       where(\"read\", \"==\", false)\r\n//     );\r\n\r\n//     const markRead = async () => {\r\n//       const snapshot = await getDocs(q);\r\n//       snapshot.docs.forEach(async (docSnap) => {\r\n//         await updateDoc(doc(db, \"messages\", docSnap.id), { read: true });\r\n//       });\r\n//     };\r\n//     markRead();\r\n//   }, [selectedUser]);\r\n\r\n//   // Request browser notification permission\r\n//   useEffect(() => {\r\n//     if (\"Notification\" in window) Notification.requestPermission();\r\n//   }, []);\r\n\r\n//   const acceptRequest = async (req) => {\r\n//     const requestRef = doc(db, \"requests\", req.id);\r\n//     await updateDoc(requestRef, { status: \"accepted\" });\r\n//   };\r\n\r\n//   const rejectRequest = async (req) => {\r\n//     const requestRef = doc(db, \"requests\", req.id);\r\n//     await updateDoc(requestRef, { status: \"rejected\" });\r\n//   };\r\n\r\n//   const sendMessage = async () => {\r\n//     if (!newMessage.trim() || !selectedUser) return;\r\n//     const chatId = [user.googleId, selectedUser.id].sort().join(\"_\");\r\n//     await addDoc(collection(db, \"messages\"), {\r\n//       chatId,\r\n//       fromId: user.googleId,\r\n//       toId: selectedUser.id,\r\n//       message: newMessage,\r\n//       timestamp: serverTimestamp(),\r\n//       read: false, // âœ… New\r\n//     });\r\n//     setNewMessage(\"\");\r\n//   };\r\n\r\n//   // --- UI ---\r\n//   return (\r\n//     <div\r\n//       style={{\r\n//         display: \"flex\",\r\n//         height: \"80vh\",\r\n//         margin: \"20px auto\",\r\n//         maxWidth: \"900px\",\r\n//         border: \"1px solid #ddd\",\r\n//         borderRadius: \"10px\",\r\n//         overflow: \"hidden\",\r\n//         boxShadow: \"0 4px 8px rgba(0,0,0,0.1)\",\r\n//       }}\r\n//     >\r\n//       {/* Left Sidebar: Chats + Requests */}\r\n//       <div\r\n//         style={{\r\n//           width: \"30%\",\r\n//           borderRight: \"1px solid #ddd\",\r\n//           display: \"flex\",\r\n//           flexDirection: \"column\",\r\n//           background: \"#f8f9fa\",\r\n//         }}\r\n//       >\r\n//         <h2 style={{ textAlign: \"center\", padding: \"15px 0\", borderBottom: \"1px solid #ddd\" }}>\r\n//           Chats\r\n//         </h2>\r\n\r\n//         {/* Incoming Requests */}\r\n//         <div style={{ padding: \"10px\", borderBottom: \"1px solid #ddd\" }}>\r\n//           <h4>Requests</h4>\r\n//           {requests.length === 0 ? (\r\n//             <p style={{ fontSize: \"14px\", color: \"#777\" }}>No requests</p>\r\n//           ) : (\r\n//             requests.map((req) => {\r\n//               const fromUser = allUsers.find((u) => u.googleId === req.fromId);\r\n//               return (\r\n//                 <div\r\n//                   key={req.id}\r\n//                   style={{\r\n//                     background: \"#fff\",\r\n//                     padding: \"8px\",\r\n//                     borderRadius: \"8px\",\r\n//                     marginBottom: \"8px\",\r\n//                   }}\r\n//                 >\r\n//                   <p style={{ margin: \"0 0 5px 0\" }}>From: {fromUser?.name || \"Unknown\"}</p>\r\n//                   <button\r\n//                     onClick={() => acceptRequest(req)}\r\n//                     style={{\r\n//                       marginRight: \"5px\",\r\n//                       background: \"#4CAF50\",\r\n//                       color: \"white\",\r\n//                       border: \"none\",\r\n//                       padding: \"5px 10px\",\r\n//                       borderRadius: \"5px\",\r\n//                       cursor: \"pointer\",\r\n//                     }}\r\n//                   >\r\n//                     Accept\r\n//                   </button>\r\n//                   <button\r\n//                     onClick={() => rejectRequest(req)}\r\n//                     style={{\r\n//                       background: \"#f44336\",\r\n//                       color: \"white\",\r\n//                       border: \"none\",\r\n//                       padding: \"5px 10px\",\r\n//                       borderRadius: \"5px\",\r\n//                       cursor: \"pointer\",\r\n//                     }}\r\n//                   >\r\n//                     Reject\r\n//                   </button>\r\n//                 </div>\r\n//               );\r\n//             })\r\n//           )}\r\n//         </div>\r\n\r\n//         {/* Accepted Users (Chat List) */}\r\n//         <div style={{ flex: 1, overflowY: \"auto\" }}>\r\n//           {acceptedUsers.map((u) => (\r\n//             <div\r\n//               key={u.id}\r\n//               onClick={() => setSelectedUser(u)}\r\n//               style={{\r\n//                 padding: \"12px 15px\",\r\n//                 cursor: \"pointer\",\r\n//                 background:\r\n//                   selectedUser?.id === u.id ? \"#d1f0ff\" : \"transparent\",\r\n//                 borderBottom: \"1px solid #eee\",\r\n//                 display: \"flex\",\r\n//                 justifyContent: \"space-between\",\r\n//                 alignItems: \"center\",\r\n//                 transition: \"background 0.2s\",\r\n//               }}\r\n//               onMouseEnter={(e) => (e.currentTarget.style.background = \"#eef6ff\")}\r\n//               onMouseLeave={(e) =>\r\n//                 (e.currentTarget.style.background =\r\n//                   selectedUser?.id === u.id ? \"#d1f0ff\" : \"transparent\")\r\n//               }\r\n//             >\r\n//               <strong>{u.name}</strong>\r\n//               {unreadCounts[u.id] > 0 && (\r\n//                 <span\r\n//                   style={{\r\n//                     background: \"red\",\r\n//                     color: \"white\",\r\n//                     borderRadius: \"50%\",\r\n//                     padding: \"2px 7px\",\r\n//                     fontSize: \"12px\",\r\n//                   }}\r\n//                 >\r\n//                   {unreadCounts[u.id]}\r\n//                 </span>\r\n//               )}\r\n//             </div>\r\n//           ))}\r\n//           {acceptedUsers.length === 0 && (\r\n//             <p style={{ textAlign: \"center\", color: \"#777\", marginTop: \"10px\" }}>No chats yet</p>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Right Chat Section */}\r\n//       <div style={{ flex: 1, display: \"flex\", flexDirection: \"column\" }}>\r\n//         {selectedUser ? (\r\n//           <>\r\n//             {/* Header */}\r\n//             <div\r\n//               style={{\r\n//                 padding: \"15px\",\r\n//                 borderBottom: \"1px solid #ddd\",\r\n//                 background: \"#f0f0f0\",\r\n//                 fontWeight: \"bold\",\r\n//               }}\r\n//             >\r\n//               Chat with {selectedUser.name}\r\n//             </div>\r\n\r\n//             {/* Chat messages */}\r\n//             <div\r\n//               style={{\r\n//                 flex: 1,\r\n//                 overflowY: \"auto\",\r\n//                 padding: \"15px\",\r\n//                 background: \"#e5ddd5\",\r\n//               }}\r\n//             >\r\n//               {messages.length === 0 && (\r\n//                 <p style={{ textAlign: \"center\", color: \"#666\" }}>No messages yet.</p>\r\n//               )}\r\n//               {messages.map((msg, idx) => {\r\n//                 const isSent = msg.fromId === user.googleId;\r\n//                 return (\r\n//                   <div\r\n//                     key={idx}\r\n//                     style={{\r\n//                       display: \"flex\",\r\n//                       justifyContent: isSent ? \"flex-end\" : \"flex-start\",\r\n//                       marginBottom: \"10px\",\r\n//                     }}\r\n//                   >\r\n//                     <div\r\n//                       style={{\r\n//                         maxWidth: \"70%\",\r\n//                         padding: \"10px 15px\",\r\n//                         borderRadius: \"15px\",\r\n//                         background: isSent ? \"#4CAF50\" : \"#fff\",\r\n//                         color: isSent ? \"#fff\" : \"#000\",\r\n//                         boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\",\r\n//                         wordBreak: \"break-word\",\r\n//                       }}\r\n//                     >\r\n//                       {msg.message}\r\n//                     </div>\r\n//                   </div>\r\n//                 );\r\n//               })}\r\n//               <div ref={messagesEndRef} />\r\n//             </div>\r\n\r\n//             {/* Input */}\r\n//             <div\r\n//               style={{\r\n//                 display: \"flex\",\r\n//                 padding: \"10px\",\r\n//                 borderTop: \"1px solid #ddd\",\r\n//                 background: \"#fafafa\",\r\n//               }}\r\n//             >\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={newMessage}\r\n//                 onChange={(e) => setNewMessage(e.target.value)}\r\n//                 onKeyDown={(e) => e.key === \"Enter\" && sendMessage()} // âœ… Press Enter to send\r\n//                 placeholder=\"Type a message...\"\r\n//                 style={{\r\n//                   flex: 1,\r\n//                   padding: \"10px\",\r\n//                   borderRadius: \"20px\",\r\n//                   border: \"1px solid #ccc\",\r\n//                   outline: \"none\",\r\n//                 }}\r\n//               />\r\n//               <button\r\n//                 onClick={sendMessage}\r\n//                 style={{\r\n//                   marginLeft: \"10px\",\r\n//                   padding: \"10px 15px\",\r\n//                   background: \"#4CAF50\",\r\n//                   color: \"white\",\r\n//                   border: \"none\",\r\n//                   borderRadius: \"20px\",\r\n//                   cursor: \"pointer\",\r\n//                 }}\r\n//               >\r\n//                 Send\r\n//               </button>\r\n//             </div>\r\n//           </>\r\n//         ) : (\r\n//           <div\r\n//             style={{\r\n//               flex: 1,\r\n//               display: \"flex\",\r\n//               alignItems: \"center\",\r\n//               justifyContent: \"center\",\r\n//               color: \"#666\",\r\n//               fontSize: \"18px\",\r\n//             }}\r\n//           >\r\n//             Select a chat to start messaging\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}